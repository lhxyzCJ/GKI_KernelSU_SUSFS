name: GKI Kernel Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      make_release:
        required: true
        type: boolean
        default: true
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      # kernelsu_branch_other:
      #   required: false
      #   type: string
      revision:
        required: false
        type: string
      version:
        required: false
        type: string
      use_zram:
        required: true
        type: boolean
        default: true
      use_kpm:
        required: true
        type: boolean
        default: true
      supp_op:
        required: true
        type: boolean
        default: false
      set_defbbr:  # 补充原步骤缺失的 input，避免引用报错
        required: false
        type: boolean
        default: false
jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Set swap space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 20
      - name: 设定 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      # Install ccache
      - name: 安装 ccache 及基础依赖
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl make  # 新增 make（编译必需）

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-

      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      - name: 安装仓库（保留repo工具，不影响其他步骤）
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          
      - name: 再次确认 CONFIG 环境变量（避免后续步骤变量丢失）
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: 克隆仓库到指定目录（自动创建不存在的目录）
        run: |
          TARGET_DIR="$CONFIG/common"
          echo "当前 CONFIG 变量值：$CONFIG"
          echo "预期克隆目录 TARGET_DIR：$TARGET_DIR"
          # 克隆默认分支到 common 目录（确保后续步骤路径匹配）
          git clone https://github.com/AviderMin/android_kernel_xiaomi_marble.git --depth=1 "$TARGET_DIR"
          # 进入源码目录验证
          cd "$TARGET_DIR"
          echo "Successfully cloned kernel source to $(pwd) (using default branch)"

      # - name: 使GKI在一加8E平台正常使用
      #   if: ${{ inputs.supp_op }}
      #   run: |
      #     echo '切换到驱动目录'
      #     cd "$CONFIG/common/drivers/"
      #     echo "当前目录 $(pwd), 下载支持补丁"
      #     curl -LSs "https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/dev/hmbird_patch.c" -o hmbird_patch.c
      #     if [ ! -f hmbird_patch.c ]; then
      #       echo "hmbird_patch.c 下载失败"
      #     fi
      #     echo '补丁加入构建'
      #     echo "obj-y += hmbird_patch.o" >> Makefile
      #     tail -n 3 Makefile
      
      # - name: 确定 KernelSU 的分支
      #   run: |
      #     branch_input="${{ inputs.kernelsu_branch }}"
      #     variant_input="${{ inputs.kernelsu_variant }}"
      #     case "$branch_input" in
      #       "Stable(标准)")
      #         echo "BRANCH=-s susfs-main" >> $GITHUB_ENV
      #         ;;
      #       "Dev(开发)")
      #         case "$variant_input" in
      #           "Official" | "MKSU") echo "BRANCH=-s main" >> $GITHUB_ENV ;;
      #           "Next")              echo "BRANCH=-s next-susfs-dev" >> $GITHUB_ENV ;;
      #           "SukiSU")           echo "BRANCH=-s susfs-test" >> $GITHUB_ENV ;;
      #           *) 
      #             echo "错误：未定义开发分支的变体 '$variant_input'" >&2
      #             exit 1
      #             ;;
      #         esac
      #         ;;
      #       *)
      #         echo "错误：需要自定义分支时未提供参数" >&2
      #         exit 1
      #         ;;
      #     esac

      # - name: 添加 KernelSU
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG"
      #     if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
      #       echo "Adding KernelSU Official..."
      #       curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
      #     elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
      #       echo "Adding KernelSU Next..."
      #       curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH
      #     elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
      #       echo "Adding KernelSU MKSU..."
      #       curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
      #     elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
      #       echo "Adding KernelSU SukiSU..."
      #       curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
      #     fi

      # - name: 为 KernelSU 变体安装 SUSFS 补丁
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG"
      #     echo "Applying SUSFS patches..."
      #     # Copy SUSFS patches to common directory
      #     cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
      #     cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
      #     cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

      #     if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
      #       echo "Applying SUSFS patches for Official KernelSU..."
      #       cd ./KernelSU
      #       cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
      #       patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch
      #     elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
      #       cd ./KernelSU-Next
      #       sed -i '/bool ksu_devpts_hook = false;/d' ./kernel/sucompat.c
      #     elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
      #       echo "Applying SUSFS patches for MKSU..."
      #       cd ./KernelSU
      #       cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
      #       patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
      #       echo "Applying MKSU specific SUSFS patch..."
      #       cp ../../kernel_patches/mksu/mksu_susfs.patch ./
      #       patch -p1 < mksu_susfs.patch || true
      #       cp ../../kernel_patches/mksu/fix.patch ./
      #       patch -p1 < fix.patch || true
      #     elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
      #       echo "Applying SUSFS patches for SukiSU..."
      #       cd ./KernelSU
      #       echo "Applying SukiSU specific SUSFS patch..."
      #     else
      #       echo "Invalid KernelSU variant selected!"
      #       exit 1
      #     fi

      #     cd ../common
      #     FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
      #     if grep -q deprecated <<< "$REMOTE_BRANCH" && \
      #        { [ "$FORMATTED_BRANCH" == "android12-5.10" ] && \
      #          [ ${{ inputs.sub_level }} -lt 136 ]; }; then
      #       patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
      #       curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fdinfo.c.patch -o fdinfo.c.patch
      #       patch -p1 < fdinfo.c.patch
      #     else
      #       patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
      #     fi
  
      # - name: 应用新的HOOKS补丁
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG/common"
      #     if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
      #       echo "Applying hooks for KernelSU-Next..."
      #       cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
      #       patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
      #     elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
      #       echo "Applying hooks for SukiSU..."
      #       cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
      #       patch -p1 -F 3 < syscall_hooks.patch
      #     fi

      # - name: 复制源文件 & 应用LZ4KD & ZSTDN补丁
      #   if: ${{ inputs.use_zram }}
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG/common"
      #     cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
      #     cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
      #     cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
      #     cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/

      #     cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
      #     echo "正在打lz4kd补丁"
      #     patch -p1 -F 3 < lz4kd.patch || true
      #     echo '完成LZ4KD补丁'

      #     cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./
      #     echo "正在打lz4k_oplus补丁"
      #     patch -p1 -F 3 < lz4k_oplus.patch || true
      #     echo '完成lz4k_oplus补丁'

      # - name: 应用隐藏某特征的补丁
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG/common"
      #     if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
      #       cp ../../SukiSU_patch/69_hide_stuff.patch ./
      #       patch -p1 -F 3 < 69_hide_stuff.patch
      #     else
      #       cp ../../kernel_patches/69_hide_stuff.patch ./
      #       patch -p1 -F 3 < 69_hide_stuff.patch
      #     fi

      # - name: LZ4KD & Lz4k_oplus配置
      #   if: ${{ inputs.use_zram }}
      #   run: |
      #     set -x
      #     set -e
      #     echo "写入LZ4KD&ZSTDN config依赖"
      #     CONFIG_FILE="$CONFIG/common/arch/arm64/configs/marble_defconfig"

      #     if [ "${{ inputs.kernel_version }}" = "5.10" ]; then
      #       echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
      #       echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
      #     fi

      #     if [ "${{ inputs.kernel_version }}" != "6.6" ] && [ "${{ inputs.kernel_version }}" != "5.10" ]; then
      #       if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
      #           echo "提示：文件 $CONFIG_FILE 包含字符串 CONFIG_ZSMALLOC。"
      #           sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
      #       else
      #           echo "警告：文件 $CONFIG_FILE 不包含字符串 CONFIG_ZSMALLOC。"
      #           echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
      #       fi
      #       sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
      #     fi

      #     if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
      #       echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
      #       sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
      #     fi

      #     if [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
      #       # 若仓库无modules.bzl，跳过此修改（避免报错）
      #       if [ -f "$CONFIG/common/modules.bzl" ]; then
      #         sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
      #       fi
      #       echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
      #       echo 'Android14_Bazel:已修复zram&zsmalloc'
      #     fi

      #     if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
      #       echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
      #     fi

      # - name: 设置BBR为默认拥塞算法
      #   if: ${{ inputs.set_defbbr }}
      #   run: |
      #     CONFIG_FILE="$CONFIG/common/arch/arm64/configs/marble_defconfig"
      #     echo "Changing to configuration directory: $CONFIG_FILE..."
      #     echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
           
      # - name: 添加SUSFS配置设置
      #   run: |
      #     echo "更改为配置目录: $CONFIG..."
      #     cd "$CONFIG"
      #     echo "Adding configuration settings to gki_defconfig..."
      #     CONFIG_FILE="$CONFIG/common/arch/arm64/configs/marble_defconfig"

      #     # Add KSU configuration settings
      #     echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

      #     if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
      #       echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$CONFIG_FILE"
      #       echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
      #     elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
      #       echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
      #       echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
      #       echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
      #     elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
      #       echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
      #     fi
          
      #     # Add additional tmpfs config setting
      #     echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

      #     # Add additional config setting
      #     echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$CONFIG_FILE"

      #     # Add BBR Config
      #     echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
      #     echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
      #     echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

      #     # Add SUSFS configuration settings
      #     echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
      #     if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
      #       echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
      #     else
      #       echo "CONFIG_KSU_SUSFS_SUS_PATH=n" >> "$CONFIG_FILE"
      #     fi
      #     echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
      #     echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          
      #     # 若build.config.gki存在，移除check_defconfig（避免编译时检查）
      #     if [ -f "$CONFIG/common/build.config.gki" ]; then
      #       sed -i 's/check_defconfig//' "$CONFIG/common/build.config.gki"
      #     fi

      # ###########################
      # 核心修改：替换为Makefile编译
      # ###########################
      - name: Build with retry（改用传统Makefile编译）
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60  # 延长超时（内核编译耗时较长，30分钟可能不够）
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd "$CONFIG"

            # 1. 仅当文件存在时修改build.config（避免文件不存在导致sed报错）
            if [ -f "common/build.config.gki.aarch64" ]; then
              sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' common/build.config.gki.aarch64
              sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' common/build.config.gki.aarch64
              sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' common/build.config.gki.aarch64
            fi

            # 2. 安装ARM64交叉编译工具链（编译ARM64内核必需）
            sudo apt install -y gcc-aarch64-linux-gnu

            # 3. 进入内核源码目录（common）
            cd common

            # 4. 清理旧编译产物（避免残留文件干扰）
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- clean

            # 5. 加载标准GKI配置（根据仓库实际配置名调整，此处用gki_defconfig）
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- marble_defconfig

            # 6. 多线程编译（用ccache加速，适配原ccache配置）

             make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- gki_defconfig

            make ARCH=arm64 \
                 CROSS_COMPILE=aarch64-linux-gnu- \
                 CC="ccache aarch64-linux-gnu-gcc" \
                 -j$(nproc)

            # 7. 复制编译产物到后续步骤预期路径（$CONFIG/out/dist）
            # 确保后续“创建bootimg”“修补Image”步骤能找到Image文件
            mkdir -p ../out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist
            cp arch/arm64/boot/Image ../out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/
            # 若存在LZ4压缩镜像，一并复制
            if [ -f "arch/arm64/boot/Image.lz4" ]; then
              cp arch/arm64/boot/Image.lz4 ../out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/
            fi

            # 8. 显示ccache统计（保留原逻辑）
            ccache --show-stats
            
      # - name: 修补 Image 文件 安卓12和安卓13(仅限sukisu)
      #   if: ${{ inputs.use_kpm && inputs.kernelsu_variant == 'SukiSU' && (inputs.android_version == 'android12' || inputs.android_version == 'android13') }}
      #   run: |
      #     if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
      #       echo "Patching Image file..."
      #       # 路径与编译步骤输出路径对齐
      #       cd "$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
      #       curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
      #       chmod 777 patch
      #       ./patch
      #       rm -rf Image
      #       mv oImage Image
      #       cd ../../../..
      #     fi

      # - name: 修补 Image 文件 安卓14和安卓15(仅限sukisu)
      #   if: ${{ inputs.use_kpm && inputs.kernelsu_variant == 'SukiSU' && (inputs.android_version == 'android14' || inputs.android_version == 'android15') }}
      #   run: |
      #     if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
      #       echo "Patching Image file..."
      #       # 若安卓14+仍用out/dist路径（而非bazel-bin），统一路径
      #       cd "$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
      #       curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
      #       chmod 777 patch
      #       ./patch
      #       rm -rf Image
      #       mv oImage Image
      #       cd ../../../..
      #     fi

      - name: 创建Bootimgs文件夹并复制镜像
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          # 路径与编译步骤输出路径对齐
          IMAGE_SRC="$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
          cp "$IMAGE_SRC/Image" ./bootimgs
          if [ -f "$IMAGE_SRC/Image.lz4" ]; then
            cp "$IMAGE_SRC/Image.lz4" ./bootimgs
          fi
          cp "$IMAGE_SRC/Image" ./
          if [ -f "$IMAGE_SRC/Image.lz4" ]; then
            cp "$IMAGE_SRC/Image.lz4" ./
          fi

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: 创建Bootimgs文件夹并复制镜像
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          # 统一路径为out/dist（而非bazel-bin），与编译步骤对齐
          IMAGE_SRC="$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
          cp "$IMAGE_SRC/Image" ./bootimgs
          if [ -f "$IMAGE_SRC/Image.lz4" ]; then
            cp "$IMAGE_SRC/Image.lz4" ./bootimgs
          fi
          cp "$IMAGE_SRC/Image" ./
          if [ -f "$IMAGE_SRC/Image.lz4" ]; then
            cp "$IMAGE_SRC/Image.lz4" ./
          fi

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: 创建不同格式的ZIP文件
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3

          # Create and upload zip for each format
          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image

          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-lz4.zip"
          echo "Creating zip file: $ZIP_NAME..."
          if [ -f "../Image.lz4" ]; then
            mv ../Image.lz4 ./Image.lz4
            zip -r "../$ZIP_NAME" ./*
            rm ./Image.lz4
          fi

          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-gz.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd bootimgs

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip

          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)

          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi

          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img

          echo "Building boot-lz4.img"
          if [ -f "./Image.lz4" ]; then
            $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            cp ./boot-lz4.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img
          fi

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img

          echo "Building boot-lz4.img"
          if [ -f "./Image.lz4" ]; then
            $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            cp ./boot-lz4.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img
          fi

      - name: 上传编译资产
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}_kernel-${{ env.CONFIG }}
          path: |
            *AnyKernel3.zip
            *.img
